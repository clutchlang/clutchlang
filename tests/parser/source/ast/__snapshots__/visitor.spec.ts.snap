// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class PrintTreeVisitor extends /* istanbul ignore next */(AstVisitor) {
    constructor(indentBy = /* istanbul ignore next */(cov_1820g0n6e7.b[0][0]++, 2)) {
        /* istanbul ignore next */cov_1820g0n6e7.f[3]++;
        cov_1820g0n6e7.s[8]++;

        super();
        /* istanbul ignore next */cov_1820g0n6e7.s[9]++;
        this.indentBy = indentBy;
        /* istanbul ignore next */cov_1820g0n6e7.s[10]++;
        this.output = '';
        /* istanbul ignore next */cov_1820g0n6e7.s[11]++;
        this.indent = 0;
    }
    visitCompilationUnit(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[4]++;
        cov_1820g0n6e7.s[12]++;

        this.write('CompilationUnit');
        /* istanbul ignore next */cov_1820g0n6e7.s[13]++;
        this.indentMore();
        /* istanbul ignore next */cov_1820g0n6e7.s[14]++;
        super.visitCompilationUnit(node);
        /* istanbul ignore next */cov_1820g0n6e7.s[15]++;
        this.indentLess();
        /* istanbul ignore next */cov_1820g0n6e7.s[16]++;
        return this.output;
    }
    visitFunctionDeclaration(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[5]++;
        cov_1820g0n6e7.s[17]++;

        this.write(\`FunctionDeclaration (name = \${node.name})\`);
        /* istanbul ignore next */cov_1820g0n6e7.s[18]++;
        this.indentMore();
        /* istanbul ignore next */cov_1820g0n6e7.s[19]++;
        super.visitFunctionDeclaration(node);
        /* istanbul ignore next */cov_1820g0n6e7.s[20]++;
        this.indentLess();
    }
    visitLiteralBoolean(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[6]++;
        cov_1820g0n6e7.s[21]++;

        this.write(\`LiteralBoolean: \${node.value}\`);
    }
    visitLiteralNumber(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[7]++;
        cov_1820g0n6e7.s[22]++;

        this.write(\`LiteralNumber: \${node.value}\`);
    }
    visitLiteralString(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[8]++;
        cov_1820g0n6e7.s[23]++;

        this.write(\`LiteralString: \${node.value}\`);
    }
    visitLiteralIdentifier(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[9]++;
        cov_1820g0n6e7.s[24]++;

        this.write(\`LiteralIdentifier: \${node.name}\`);
    }
    visitInvocationExpression(node) {
        /* istanbul ignore next */cov_1820g0n6e7.f[10]++;
        cov_1820g0n6e7.s[25]++;

        this.write(\`InvocationExpression:\`);
        /* istanbul ignore next */cov_1820g0n6e7.s[26]++;
        this.indentMore();
        /* istanbul ignore next */cov_1820g0n6e7.s[27]++;
        this.write(\`Target:\`);
        /* istanbul ignore next */cov_1820g0n6e7.s[28]++;
        this.indentMore();
        /* istanbul ignore next */cov_1820g0n6e7.s[29]++;
        node.target.visit(this);
        /* istanbul ignore next */cov_1820g0n6e7.s[30]++;
        this.indentLess();
        /* istanbul ignore next */cov_1820g0n6e7.s[31]++;
        this.write(\`Args:\`);
        /* istanbul ignore next */cov_1820g0n6e7.s[32]++;
        this.indentMore();
        /* istanbul ignore next */cov_1820g0n6e7.s[33]++;
        super.visitInvocationExpression(node);
        /* istanbul ignore next */cov_1820g0n6e7.s[34]++;
        this.indentLess();
    }
    indentMore() {
        /* istanbul ignore next */cov_1820g0n6e7.f[11]++;
        cov_1820g0n6e7.s[35]++;

        this.indent += this.indentBy;
    }
    indentLess() {
        /* istanbul ignore next */cov_1820g0n6e7.f[12]++;
        cov_1820g0n6e7.s[36]++;

        this.indent -= this.indentBy;
    }
    write(message) {
        /* istanbul ignore next */cov_1820g0n6e7.f[13]++;

        const indent = /* istanbul ignore next */(cov_1820g0n6e7.s[37]++, ' '.repeat(this.indent));
        /* istanbul ignore next */cov_1820g0n6e7.s[38]++;
        this.output += \`\${indent}\${message}\\n\`;
    }
} should emit a readable structure for a program 1`] = `
"CompilationUnit
  FunctionDeclaration (name = emptyFunction)
  FunctionDeclaration (name = returnsLiteral)
    LiteralBoolean: true
  FunctionDeclaration (name = hasExpressionBody)
    LiteralNumber: 1
    LiteralNumber: 2
    LiteralNumber: 3
  FunctionDeclaration (name = hasInvocationBody)
    InvocationExpression:
      Target:
        LiteralIdentifier: print
      Args:
        LiteralString: Hello World
"
`;
