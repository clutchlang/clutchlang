// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClutchParser conditional simple 1`] = `
"ConditionalExpression:
  If:
    SimpleName: a
  Body:
    SimpleName: b
"
`;

exports[`ClutchParser conditional with else 1`] = `
"ConditionalExpression:
  If:
    SimpleName: a
  Body:
    SimpleName: b
  Else:
    SimpleName: c
"
`;

exports[`ClutchParser invocation accessor 1`] = `
"InvokeExpression:
  Target:
    BinaryExpression:
      Left:
        SimpleName: a
      Operator: .
      Right:
        SimpleName: fn
  Parameters:
"
`;

exports[`ClutchParser invocation accessor and chained 1`] = `
"InvokeExpression:
  Target:
    BinaryExpression:
      Left:
        SimpleName: a
      Operator: .
      Right:
        SimpleName: fn
  Parameters:
"
`;

exports[`ClutchParser invocation chained 1`] = `
"InvokeExpression:
  Target:
    InvokeExpression:
      Target:
        SimpleName: fn
      Parameters:
  Parameters:
"
`;

exports[`ClutchParser invocation complex 1`] = `
"InvokeExpression:
  Target:
    SimpleName: fn
  Parameters:
    InvokeExpression:
      Target:
        SimpleName: a
      Parameters:
    BinaryExpression:
      Left:
        LiteralNumber: 1
      Operator: +
      Right:
        LiteralNumber: 1
    InvokeExpression:
      Target:
        BinaryExpression:
          Left:
            SimpleName: b
          Operator: .
          Right:
            SimpleName: c
      Parameters:
"
`;

exports[`ClutchParser invocation simple 1`] = `
"InvokeExpression:
  Target:
    SimpleName: fn
  Parameters:
"
`;

exports[`ClutchParser invocation simple with multiple parameters 1`] = `
"InvokeExpression:
  Target:
    SimpleName: fn
  Parameters:
    SimpleName: a
    SimpleName: b
"
`;

exports[`ClutchParser invocation simple with parameter 1`] = `
"InvokeExpression:
  Target:
    SimpleName: fn
  Parameters:
    SimpleName: a
"
`;

exports[`ClutchParser parenthesized extra parens 1`] = `
"GroupExpression:
  Expression:
    GroupExpression:
      Expression:
        SimpleName: a
"
`;

exports[`ClutchParser parenthesized simple 1`] = `
"GroupExpression:
  Expression:
    SimpleName: a
"
`;

exports[`ClutchParser parenthesized with a binary expression 1`] = `
"GroupExpression:
  Expression:
    BinaryExpression:
      Left:
        SimpleName: a
      Operator: +
      Right:
        SimpleName: b
"
`;

exports[`ClutchParser parenthesized with a postfix expression 1`] = `
"GroupExpression:
  Expression:
    UnaryExpression:
      Target:
        SimpleName: a
      Operator: -- (Postfix)
"
`;

exports[`ClutchParser parenthesized with a prefix expression 1`] = `
"UnaryExpression:
  Target:
    GroupExpression:
      Expression:
        UnaryExpression:
          Target:
            SimpleName: a
          Operator: -- (Prefix)
  Operator: -- (Postfix)
"
`;

exports[`ClutchParser should parse and print binary a != b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: !=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a !== b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: !==
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a % b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: %
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a %= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: %=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a && b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: &&
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a * b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: *
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a *= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: *=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a + b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: +
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a += b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: +=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a . b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: .
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a / b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: /
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a /= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: /=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a < b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: <
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a <= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: <=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a = b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: =
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a == b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: ==
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a === b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: ===
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a > b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: >
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a >= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: >=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a || b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: ||
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a - b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: -
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print binary a -= b 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: -=
  Right:
    SimpleName: b
"
`;

exports[`ClutchParser should parse and print literal 
          Hello
          World!
         1`] = `
"SimpleName: Hello
"
`;

exports[`ClutchParser should parse and print literal 'Hello' 1`] = `
"LiteralString: 'Hello'
"
`;

exports[`ClutchParser should parse and print literal 1 1`] = `
"LiteralNumber: 1
"
`;

exports[`ClutchParser should parse and print literal 1.5 1`] = `
"LiteralNumber: 1.5
"
`;

exports[`ClutchParser should parse and print literal 3.14 1`] = `
"LiteralNumber: 3.14
"
`;

exports[`ClutchParser should parse and print literal 30.4 1`] = `
"LiteralNumber: 30.4
"
`;

exports[`ClutchParser should parse and print literal false 1`] = `
"LiteralBoolean: false
"
`;

exports[`ClutchParser should parse and print literal fooBar 1`] = `
"SimpleName: fooBar
"
`;

exports[`ClutchParser should parse and print literal true 1`] = `
"SimpleName: true
"
`;

exports[`ClutchParser should parse and print unary (postfix) a ++ 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: ++ (Postfix)
"
`;

exports[`ClutchParser should parse and print unary (postfix) a -- 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: -- (Postfix)
"
`;

exports[`ClutchParser should parse and print unary (prefix) ! a 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: ! (Prefix)
"
`;

exports[`ClutchParser should parse and print unary (prefix) + a 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: + (Prefix)
"
`;

exports[`ClutchParser should parse and print unary (prefix) ++ a 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: ++ (Prefix)
"
`;

exports[`ClutchParser should parse and print unary (prefix) - a 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: - (Prefix)
"
`;

exports[`ClutchParser should parse and print unary (prefix) -- a 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: -- (Prefix)
"
`;
