// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AstNodeFactory <Expression> should create BinaryExpression 1`] = `
"BinaryExpression:
  Left:
    SimpleName: a
  Operator: +
  Right:
    SimpleName: b
"
`;

exports[`AstNodeFactory <Expression> should create GroupExpression 1`] = `
"GroupExpression:
  Expression:
    SimpleName: a
"
`;

exports[`AstNodeFactory <Expression> should create IfExpression  1`] = `
"ConditionalExpression:
  If:
    SimpleName: a
  Body:
    SimpleName: b
"
`;

exports[`AstNodeFactory <Expression> should create IfExpression with else 1`] = `
"ConditionalExpression:
  If:
    SimpleName: a
  Body:
    SimpleName: b
  Else:
    SimpleName: a
"
`;

exports[`AstNodeFactory <Expression> should create postfix UnaryExpression 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: . (Postfix)
"
`;

exports[`AstNodeFactory <Expression> should create prefix UnaryExpression 1`] = `
"UnaryExpression:
  Target:
    SimpleName: a
  Operator: ! (Prefix)
"
`;

exports[`AstNodeFactory LiteralBoolean should evaluate false 1`] = `
"LiteralBoolean: false
"
`;

exports[`AstNodeFactory LiteralBoolean should evaluate true 1`] = `
"LiteralBoolean: true
"
`;

exports[`AstNodeFactory LiteralNumber should evaluate exponential 1`] = `
"LiteralNumber: 2000000
"
`;

exports[`AstNodeFactory LiteralNumber should evaluate float 1`] = `
"LiteralNumber: 1.5
"
`;

exports[`AstNodeFactory LiteralNumber should evaluate hex 1`] = `
"LiteralNumber: 4095
"
`;

exports[`AstNodeFactory LiteralNumber should evaluate int 1`] = `
"LiteralNumber: 1
"
`;

exports[`AstNodeFactory LiteralString should evaluate an empty string 1`] = `
"LiteralString: ''
"
`;

exports[`AstNodeFactory SimpleName should implement AstNode 1`] = `
"SimpleName: fooBar
"
`;

exports[`AstNodeFactory Statement should create a let statement 1`] = `
"VariableDeclarationStatement:
  Name: a
  Assign:
    SimpleName: b
"
`;

exports[`AstNodeFactory Statement should create a return statement 1`] = `
"ReturnStatement:
  Return:
    SimpleName: a
"
`;

exports[`AstNodeFactory should create a file root 1`] = `
"FileRoot:
  Elements:
    FunctionDeclaration:
      Name:
        SimpleName: a
      Parameters:
      Body:
        SimpleName: b
"
`;

exports[`AstNodeFactory should create a function 1`] = `
"FunctionDeclaration:
  Name:
    SimpleName: a
  Parameters:
    ParameterDeclaration:
      Name:
        SimpleName: b
  Body:
    SimpleName: b
"
`;

exports[`AstNodeFactory should create an invoke expression 1`] = `
"InvokeExpression:
  Target:
    SimpleName: a
  Parameters:
"
`;
